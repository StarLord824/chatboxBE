// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       Int       @id @default(autoincrement())
  name     String
  // Relations
  chats    ChatParticipant[]
  messages Message[]
}

model Chat {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  // Relations
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  chat    Chat   @relation(fields: [chatId], references: [id])
  chatId  Int

  @@unique([userId, chatId]) // Prevent duplicate entries
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp DateTime @default(now())

  // Relations
  chat     Chat   @relation(fields: [chatId], references: [id])
  chatId   Int

  sender   User   @relation(fields: [senderId], references: [id])
  senderId Int
}


// model User {
//   id        String   @id @default(cuid())
//   name      String?
//   email     String?  @unique
//   password  String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   chats     Chat[]
// }

// model Chat {
//   id        String   @id @default(cuid())
//   userAId    String
//   userBId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userAId], references: [ id])
//   chat      User     @relation(fields: [userBId], references: [ id])
// }